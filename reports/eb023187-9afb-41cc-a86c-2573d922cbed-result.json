{"name": "test_reg_fail[asdhfgretu@gmail.com-658987542-Asedased]", "status": "skipped", "statusDetails": {"message": "XFAIL\n\nselenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00C16643]\n\t(No symbol) [0x00BABE21]\n\t(No symbol) [0x00AAD960]\n\t(No symbol) [0x00ADC3BE]\n\t(No symbol) [0x00ADB7AB]\n\t(No symbol) [0x00AFFD7C]\n\t(No symbol) [0x00AD641F]\n\t(No symbol) [0x00B000D4]\n\t(No symbol) [0x00B16B09]\n\t(No symbol) [0x00AFFB76]\n\t(No symbol) [0x00AD49C1]\n\t(No symbol) [0x00AD5E5D]\n\tGetHandleVerifier [0x00E8A142+2497106]\n\tGetHandleVerifier [0x00EB85D3+2686691]\n\tGetHandleVerifier [0x00EBBB9C+2700460]\n\tGetHandleVerifier [0x00CC3B10+635936]\n\t(No symbol) [0x00BB4A1F]\n\t(No symbol) [0x00BBA418]\n\t(No symbol) [0x00BBA505]\n\t(No symbol) [0x00BC508B]\n\tBaseThreadInitThunk [0x756900F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77677BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77677B8E+238]", "trace": "self = <test_reg.TestsReg object at 0x000002594EA04580>\nemail = 'asdhfgretu@gmail.com', phoneno = 658987542, password = 'Asedased'\n\n    @pytest.mark.negativeinput\n    @pytest.mark.xfail\n    @pytest.mark.parametrize('email, phoneno, password', getdata('TestDataPath','test_register_sheet_fail'))\n    def test_reg_fail(self, email, phoneno, password):\n        page = HomePage(self.driver)\n        page.reg_user(email, phoneno)\n        page.wait_visible('locators', 'signupWin_btn_XPATH')\n        assert page.enabled_button() == True\n        page.alluress('test_reg_fail')\n>       page.reg_user2(password)\n\ntest_reg.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\home_page.py:19: in reg_user2\n    self.type('signupWin2_passw_XPATH', password)\n..\\pages\\base_page.py:20: in type\n    self.driver.find_element(By.XPATH, confread('locators', locator)).send_keys(value)\n..\\venv_edureka\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:223: in send_keys\n    self._execute(Command.SEND_KEYS_TO_ELEMENT,\n..\\venv_edureka\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: in _execute\n    return self._parent.execute(command, params)\n..\\venv_edureka\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002594EA3F1C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77677BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77677B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=109.0.5414.120)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00C16643]\nE       \t(No symbol) [0x00BABE21]\nE       \t(No symbol) [0x00AAD960]\nE       \t(No symbol) [0x00ADC3BE]\nE       \t(No symbol) [0x00ADB7AB]\nE       \t(No symbol) [0x00AFFD7C]\nE       \t(No symbol) [0x00AD641F]\nE       \t(No symbol) [0x00B000D4]\nE       \t(No symbol) [0x00B16B09]\nE       \t(No symbol) [0x00AFFB76]\nE       \t(No symbol) [0x00AD49C1]\nE       \t(No symbol) [0x00AD5E5D]\nE       \tGetHandleVerifier [0x00E8A142+2497106]\nE       \tGetHandleVerifier [0x00EB85D3+2686691]\nE       \tGetHandleVerifier [0x00EBBB9C+2700460]\nE       \tGetHandleVerifier [0x00CC3B10+635936]\nE       \t(No symbol) [0x00BB4A1F]\nE       \t(No symbol) [0x00BBA418]\nE       \t(No symbol) [0x00BBA505]\nE       \t(No symbol) [0x00BC508B]\nE       \tBaseThreadInitThunk [0x756900F9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77677BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77677B8E+238]\n\n..\\venv_edureka\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: ElementNotInteractableException"}, "attachments": [{"name": "test_reg_fail", "source": "6c358011-0ce7-45db-839d-a28b5535686b-attachment.png", "type": "image/png"}], "parameters": [{"name": "email", "value": "'asdhfgretu@gmail.com'"}, {"name": "phoneno", "value": "658987542"}, {"name": "password", "value": "'Asedased'"}], "start": 1676066975072, "stop": 1676066983959, "uuid": "b87cc23d-c210-434d-bd09-756cea3d6d2c", "historyId": "69f19b80e2d24082abaaf5eb02a87a62", "testCaseId": "9dd55a2798b498557103e9c72b0722fb", "fullName": "test_reg.TestsReg#test_reg_fail", "labels": [{"name": "tag", "value": "@pytest.mark.xfail"}, {"name": "tag", "value": "negativeinput"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "suite", "value": "test_reg"}, {"name": "subSuite", "value": "TestsReg"}, {"name": "host", "value": "DESKTOP-T81NDI4"}, {"name": "thread", "value": "18324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_reg"}]}